import argparse


def shahana_default_setting(config):
    # parser = argparse.ArgumentParser()
    # parser.add_argument('--session_id',type=int,help='Session_ID',default=2)
    # parser.add_argument('--M',type=int,help='No of annotators',default=3)
    # parser.add_argument('--K',type=int,help='No of classes',default=10)
    # parser.add_argument('--N',type=int,help='No of data samples (synthetic data)',default=50000)
    # parser.add_argument('--R',type=int,help='Dimension of data samples (synthetic data)',default=5)
    # parser.add_argument('--l',type=int,help='number of annotations per sample or number of samples per annotators',default=3)
    # parser.add_argument('--flag_class_specialists',type=bool,help='True or False',default=False)
    # parser.add_argument('--dataset',type=str,help='synthetic or cifar10 or mnist',default='cifar10')
    # parser.add_argument('--annotator_type',type=str,help='synthetic, machine-classifier, good-bad-annotator-mix or real',default='synthetic')
    # parser.add_argument('--instance_indep_conf_type',type=str,help='symmetric,separable_uniform',default='symmetric')
    # parser.add_argument('--flag_preload_annotations',type=bool,help='True or False (if True, load annotations from file, otherwise generate annotations', default=True)
    # parser.add_argument('--varepsilon',type=float,help='parameter for class specialists',default=0.001)
    # parser.add_argument('--lam',type=float,help='Volume regularizer',default=0.001)
    # parser.add_argument('--lam_trace',type=float,help='Volume regularizer',default=0.01)
    # parser.add_argument('--mu',type=float,help='instance dependent regularizer',default=0)
    # parser.add_argument('--seed',type=int,help='Random seed',default=1)
    # parser.add_argument('--device',type=int,help='GPU device number',default=0)
    # parser.add_argument('--n_trials',type=int,help='No of trials',default=1)
    # parser.add_argument('--flag_hyperparameter_tuning',type=bool,help='True or False',default=False)
    # parser.add_argument('--proposed_init_type',type=str,help='close_to_identity or mle_based or identity',default='identity')
    # parser.add_argument('--proposed_projection_type',type=str,help='simplex_projection or softmax or sigmoid_projection',default='simplex_projection')
    # parser.add_argument('--classifier_NN',type=str,help='resnet9 or resnet18 or resnet34',default='resnet34')
    # parser.add_argument('--weight_decay', type=float, help='weight_decay for the optimizer', default=1e-3)
    # parser.add_argument('--total_noise_rate', type = float, help = 'overall noise rate for the labels', default =0.4)
    # parser.add_argument('--percent_instance_noise', type = float, help = 'percent of samples having instance-dependent noise', default =0.5)
    # parser.add_argument('--vol_reg_type',type=str, default='min_logdetw')
    # parser.add_argument('--p',type=float, default=0.2,help = 'paramater for p norm')
    # parser.add_argument('--confusion_network_input_type', type=str, help = 'classifier_ouput or feature_embedding', default ='feature_embedding')
    # parser.add_argument('--warmup_epoch',type=int,help='Number of Epochs for warmup',default=10)
    # parser.add_argument('--flag_warmup', type = int, default =0)
    # parser.add_argument('--flag_instance_dep_modeling', type = int, default =1)
    # parser.add_argument('--flag_two_optimizers', type = int, default =0)
    # parser.add_argument('--flag_instance_dep_score_calc', type = int, default =1)
    # parser.add_argument('--flag_underparameterized_instance_dep_modeling', type = int, default =0)
    # parser.add_argument('--instance_dep_percent_estim', type = float, default =0.5)
    # parser.add_argument('--learning_rate',type=float,help='Learning rate',default=0.001)
    # parser.add_argument('--batch_size',type=int,help='Batch Size',default=512)
    # parser.add_argument('--n_epoch',type=int,help='Number of Epochs',default=200)
    # parser.add_argument('--coeff_label_smoothing',type=float,help='label smoothing coefficient',default=0)
    # parser.add_argument('--log_folder',type=str,help='log folder path',default='results/cifar10_synthetic/')
    parser = argparse.ArgumentParser()
    parser.add_argument('--session',type=int,help='Session_ID',default=5)
    parser.add_argument('--M',type=int,help='No of annotators',default=3)
    parser.add_argument('--K',type=int,help='No of classes',default=10)
    parser.add_argument('--N',type=int,help='No of data samples (synthetic data)',default=50000)
    parser.add_argument('--R',type=int,help='Dimension of data samples (synthetic data)',default=5)
    parser.add_argument('--l',type=int,help='number of annotations per sample or number of samples per annotators',default=3)
    parser.add_argument('--flag_class_specialists',type=bool,help='True or False',default=False)
    parser.add_argument('--dataset',type=str,help='synthetic or cifar10 or mnist',default='cifar10')
    parser.add_argument('--annotator_type',type=str,help='synthetic, machine-classifier, good-bad-annotator-mix or real',default='synthetic')
    parser.add_argument('--instance_indep_conf_type',type=str,help='symmetric,separable_uniform',default='symmetric')
    parser.add_argument('--flag_preload_annotations',type=bool,help='True or False (if True, load annotations from file, otherwise generate annotations',default=True)
    parser.add_argument('--varepsilon',type=float,help='parameter for class specialists',default=0.001)
    parser.add_argument('--lam',type=float,help='Volume regularizer',default=0.001)
    parser.add_argument('--lam_trace',type=float,help='Volume regularizer',default=0.01)
    parser.add_argument('--mu',type=float,help='instance dependent regularizer',default=0)
    parser.add_argument('--seed',type=int,help='Random seed',default=1)
    parser.add_argument('--device',type=int,help='GPU device number',default=0)
    parser.add_argument('--n_trials',type=int,help='No of trials',default=1)
    parser.add_argument('--flag_hyperparameter_tuning',type=bool,help='True or False',default=False)
    parser.add_argument('--proposed_init_type',type=str,help='close_to_identity or mle_based or identity',default='identity')
    parser.add_argument('--proposed_projection_type',type=str,help='simplex_projection or softmax or sigmoid_projection',default='simplex_projection')
    parser.add_argument('--classifier_NN',type=str,help='resnet9 or resnet18 or resnet34',default='resnet34')
    parser.add_argument('--weight_decay', type=float, help='weight_decay for the optimizer', default=1e-3)
    parser.add_argument('--total_noise_rate', type = float, help = 'overall noise rate for the labels', default =0.4)
    parser.add_argument('--percent_instance_noise', type = float, help = 'percent of samples having instance-dependent noise', default =0.5)
    parser.add_argument('--vol_reg_type',type=str, default='min_logdetw')
    parser.add_argument('--p',type=float, default=0.2,help = 'paramater for p norm')
    parser.add_argument('--confusion_network_input_type', type=str, help = 'classifier_ouput or feature_embedding', default ='feature_embedding')
    parser.add_argument('--warmup_epoch',type=int,help='Number of Epochs for warmup',default=10)
    parser.add_argument('--flag_warmup', type = int, default =0)
    parser.add_argument('--flag_instance_dep_modeling', type = int, default =1)
    parser.add_argument('--flag_two_optimizers', type = int, default =0)
    parser.add_argument('--flag_instance_dep_score_calc', type = int, default =1)
    parser.add_argument('--flag_underparameterized_instance_dep_modeling', type = int, default =0)
    parser.add_argument('--instance_dep_percent_estim', type = float, default =0.5)
    parser.add_argument('--algorithm_list', type = list, default =['INSTANCECROWDNET_BCD'])
    parser.add_argument('--learning_rate',type=float,help='Learning rate',default=0.001)
    parser.add_argument('--batch_size',type=int,help='Batch Size',default=100)
    parser.add_argument('--n_epoch',type=int,help='Number of Epochs',default=200)
    parser.add_argument('--coeff_label_smoothing',type=float,help='label smoothing coefficient',default=0)
    parser.add_argument('--log_folder',type=str,help='log folder path',default='results/cifar10_synthetic/')
    parser.add_argument('--flag_wandb',type = int, default =0)

    # Inject my settings
    args=parser.parse_args([])
    args.M = config.data.M
    args.N = config.data.N
    args.K = config.data.K
    args.dataset = config.data.dataset
    args.percent_instance_noise = config.data.percent_instance_noise
    args.instance_indep_conf_type = config.data.instance_indep_conf_type
    args.total_noise_rate = config.data.total_noise_rate
    args.batch_size = config.train.batch_size
    args.learning_rate = config.train.batch_size

    return args

